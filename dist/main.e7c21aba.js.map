{"version":3,"sources":["main.js"],"names":["window","onload","droptriggers","document","querySelectorAll","drops","hideDrops","forEach","drop","classList","add","trigger","remove","addEventListener","e","wasClosed","nextElementSibling","contains","toggle","scrollIntoView","block","behavior","triggers","menu","querySelector","observe","anchor","IntersectionObserver","entries","indicators","target","id","isIntersecting","indicator","rootMargin","threshold","body","event","preventDefault","email","value","fetch","method","mode","headers","JSON","stringify","then","response","console","log"],"mappings":";AAAAA,OAAOC,OAAS,WAGNC,IAAAA,EAAeC,SAASC,iBAAiB,gBAEzCC,EAAQF,SAASC,iBAAiB,SAE/BE,SAAAA,IACLD,EAAME,QAAQ,SAAAC,GACVA,EAAKC,UAAUC,IAAI,eAEvBR,EAAaK,QAAQ,SAAAI,GACjBA,EAAQF,UAAUG,OAAO,aAIjCV,EAAaK,QAAQ,SAAAI,GACjBA,EAAQE,iBAAiB,QAAS,SAACC,GAC3BC,IAAAA,EAAYJ,EAAQK,mBAAmBP,UAAUQ,SAAS,aAC9DX,IACIS,GACAJ,EAAQF,UAAUS,OAAO,WACzBP,EAAQK,mBAAmBP,UAAUS,OAAO,aAC5CP,EAAQK,mBAAmBG,eAAe,CACtCC,MAAO,SACPC,SAAU,YAGdV,EAAQQ,eAAe,CACnBC,MAAO,SACPC,SAAU,eAO1Bf,IAIMgB,IAAAA,EAAWnB,SAASC,iBAAiB,gBAErCmB,EAAOpB,SAASqB,cAAc,gBAS3BC,SAAAA,EAAQC,GACE,IAAIC,qBAAqB,SAAUC,GAG1CC,IAAAA,EAAa1B,SAASC,iBAAiB,YAAcwB,EAAQ,GAAGE,OAAOC,GAAK,OAE9C,IAA9BH,EAAQ,GAAGI,eACXH,EAAWtB,QAAQ,SAAA0B,GACfA,EAAUxB,UAAUC,IAAI,WAG5BmB,EAAWtB,QAAQ,SAAA0B,GACfA,EAAUxB,UAAUG,OAAO,YAIpC,CACCsB,WAAY,aACZC,UAAW,CAAC,KAGPV,QAAQC,GA5BrBJ,EAASf,QAAQ,SAAAI,GACbA,EAAQE,iBAAiB,QAAS,WAC9BU,EAAKd,UAAUS,OAAO,iBA+B9BO,EAAQtB,SAASqB,cAAc,WAC/BC,EAAQtB,SAASqB,cAAc,WAC/BC,EAAQtB,SAASqB,cAAc,SAE/BrB,SAASiC,KAAKvB,iBAAiB,SAAU,SAAUwB,GAC/CA,EAAMC,iBACFC,IAAAA,EAAQpC,SAASqB,cAAc,qBAAqBgB,MAC3C,IAATD,GACAE,MAAM,mDAAoD,CACtDC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACW,eAAA,oBAEpBR,KAAMS,KAAKC,UAAU,CACjBP,MAAAA,MAELQ,KAAK,SAACC,GACLC,QAAQC,IAAIF,GACZ7C,SAASqB,cAAc,UAAUf,UAAUS,OAAO","file":"main.e7c21aba.js","sourceRoot":"..","sourcesContent":["window.onload = () => {\r\n    /** Dropdown */\r\n\r\n    const droptriggers = document.querySelectorAll('.droptrigger')\r\n\r\n    const drops = document.querySelectorAll('.drop')\r\n\r\n    function hideDrops() {\r\n        drops.forEach(drop => {\r\n            drop.classList.add('is-hidden')\r\n        })\r\n        droptriggers.forEach(trigger => {\r\n            trigger.classList.remove('is-down')\r\n        })\r\n    }\r\n\r\n    droptriggers.forEach(trigger => {\r\n        trigger.addEventListener('click', (e) => {\r\n            let wasClosed = trigger.nextElementSibling.classList.contains('is-hidden')\r\n            hideDrops()\r\n            if (wasClosed) {\r\n                trigger.classList.toggle('is-down')\r\n                trigger.nextElementSibling.classList.toggle('is-hidden')\r\n                trigger.nextElementSibling.scrollIntoView({\r\n                    block: \"center\",\r\n                    behavior: \"smooth\"\r\n                })\r\n            } else {\r\n                trigger.scrollIntoView({\r\n                    block: \"center\",\r\n                    behavior: \"smooth\"\r\n                })\r\n            }\r\n\r\n        })\r\n    })\r\n\r\n    hideDrops()\r\n\r\n    /** Menu Trigger */\r\n\r\n    const triggers = document.querySelectorAll('.menutrigger')\r\n\r\n    const menu = document.querySelector('.mobile-menu')\r\n\r\n    triggers.forEach(trigger => {\r\n        trigger.addEventListener('click', () => {\r\n            menu.classList.toggle('is-hidden')\r\n        })\r\n    })\r\n\r\n    /** Observer */\r\n    function observe(anchor) {\r\n        let observer = new IntersectionObserver(function (entries) {\r\n            // isIntersecting is true when element and viewport are overlapping\r\n            // isIntersecting is false when element and viewport don't overlap\r\n            let indicators = document.querySelectorAll('a[href=\"#' + entries[0].target.id + '\"]')\r\n\r\n            if (entries[0].isIntersecting === true) {\r\n                indicators.forEach(indicator => {\r\n                    indicator.classList.add('focus')\r\n                })\r\n            } else {\r\n                indicators.forEach(indicator => {\r\n                    indicator.classList.remove('focus')\r\n                })\r\n            }\r\n\r\n        }, {\r\n            rootMargin: '-200px 0px',\r\n            threshold: [0]\r\n        });\r\n\r\n        observer.observe(anchor)\r\n    }\r\n\r\n    /** Form */\r\n\r\n    observe(document.querySelector('#start'))\r\n    observe(document.querySelector('#about'))\r\n    observe(document.querySelector('#faq'))\r\n\r\n    document.body.addEventListener(\"submit\", function (event) {\r\n        event.preventDefault();\r\n        let email = document.querySelector('#pixel-form-email').value\r\n        if (email != '') {\r\n            fetch('https://wpokt-form-signup.herokuapp.com/v1/wpokt', {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email\r\n                })\r\n            }).then((response) => {\r\n                console.log(response)\r\n                document.querySelector('.modal').classList.toggle('is-active')\r\n            })\r\n        } \r\n    })\r\n}"]}